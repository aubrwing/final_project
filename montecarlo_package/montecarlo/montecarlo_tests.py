import unittest
import pandas as pd
from montecarlo import Die
from montecarlo import Game
from montecarlo import Analyzer

class MontecarloTestSuite(unittest.TestCase):
    def test_1_change_weight(self):
        """
        Tests the change_weight() method in the Die class by
        checking if the die weights stored are correct
        """
        myDie = Die([1,2,3,4,5])
        myDie.change_weight(1,15)
        test = [15,1,1,1,1]
        equality_test = myDie._die.weights == test
        self.assertTrue(equality_test.all())
    def test_2_roll(self):
        """
        Tests the roll() method in the Die class by checking
        if the results from the roll are included the faces parameter
        """
        myDie = Die([1,2,3,4,5])
        test = myDie.roll(3)
        truth_test = [i for i in test if i in [1,2,3,4,5]]
        self.assertEqual(test,truth_test)
    def test_3_show_die(self):
        """
        Test the show_die() method in the Die class by checking
        if the die stored is the same as one created without using the Die class
        """
        myDie = Die([1,2,5,8,10])
        fakeDie = pd.DataFrame({'faces':[1,2,5,8,10],'weights':[1,1,1,1,1]})
        equality_test = myDie.show_die() == fakeDie
        self.assertTrue(equality_test.all().all())
    def test_4_play(self):
        """
        Test the the play() method in the Game class to see if it returns 5 rolls
        """
        myDie = Die([1,2,3,4,6])
        myDie2 = Die([1,2,3,4,6])
        myGame = Game([myDie,myDie2])
        myGame.play(5)
        self.assertEqual(len(myGame._results),5)
    def test_5_show_play(self):
        """
        Test the show_play() method in the Game class to see if 
        the narrow form is formatted correctly
        """
        myDie = Die([1,2,3,4,6])
        myDie2 = Die([1,2,3,4,6])
        myGame = Game([myDie,myDie2])
        myGame.play(10)
        test = myGame.show_play("narrow")
        self.assertEqual(len(test),20)
    def test_6_jackpot(self):
        """
        Test the jackpot() method in the Analyzer class to 
        see if the return value is equal to 
        the sum of 'True' entries in the jackpot dataframe
        """
        myDie = Die([1,2,3,4,6])
        myDie2 = Die([1,2,3,4,6])
        myGame = Game([myDie,myDie2])
        myGame.play(5)
        myAnalyzer = Analyzer(myGame)
        count = myAnalyzer.jackpot()
        test = myAnalyzer.jackpot_results.Jackpot.sum()
        self.assertEqual(test,count)
    def test_7_combo(self):
        """
        Test the combo() function in the Analyzer class by
        comparing the sum of the combinations found to the number of 
        games played
        """
        myDie = Die([1,2,3,4,6])
        myDie2 = Die([1,2,3,4,6])
        myGame = Game([myDie,myDie2])
        myGame.play(5)
        myAnalyzer = Analyzer(myGame)
        myAnalyzer.combo()
        test = sum(myAnalyzer.combo_results.n)
        self.assertEqual(test,5)
    def test_8_face_counts_per_roll(self):
        """
        Test the face_counts_per_roll() function by checking
        if the value_counts stored in game_results were the same as the
        ones generated by face_counts_per_roll
        """
        myDie = Die([1,2,3,4,6])
        myDie2 = Die([1,2,3,4,6])
        myGame = Game([myDie,myDie2])
        myGame.play(5)
        myAnalyzer = Analyzer(myGame)
        myAnalyzer.face_counts_per_roll()
        test = myAnalyzer.face_counts
        valueDie0 = myAnalyzer.game_results['Die Result 0'].value_counts()
        valueDie1 = myAnalyzer.game_results['Die Result 1'].value_counts()
        new_thing = valueDie0.add(valueDie1,fill_value=0)
        testsum = test.sum(axis=0)
        testsum = testsum.loc[(testsum != 0)]
        testsum = testsum.reset_index(drop=True)
        new_thing = new_thing.reset_index(drop=True)
        equality=(new_thing==testsum).all()
        self.assertTrue(equality)
if __name__ == '__main__':
    
    unittest.main(verbosity=3)